package com.game.engine;

import java.util.ArrayList;
import java.util.List;

import com.game.engine.InputEvent;

/**
 * Implements Subject from Observer Pattern to manage execution of system
 * and player actions generated by Keyboard and Mouse listeners
 */
public class InputManager implements Manager, InputSubject{

	private List<InputObserver> observers;
	private List<InputObserver> auxObservers;
	private List<InputEvent> inputEvents;
	
	public InputManager() {
		observers = new ArrayList<InputObserver>();
		auxObservers = new ArrayList<InputObserver>();
		inputEvents = new ArrayList<InputEvent>();
	}

	public void attachObserver(InputObserver o) {
		this.observers.add(o);
	}
	
	public void attachInputEvent(InputEvent inputEvent) {
		this.inputEvents.add(inputEvent);
	}

	public void detachObserver(InputObserver o) {
		this.observers.remove(o);
	}

	/**
	 * Notify all input observers with input events
	 */
	public void notifyObservers() {
		
		synchronizeObservers();
		
		if(!this.inputEvents.isEmpty()) {
			
			InputEvent e = this.inputEvents.remove(0);
			
			if(!this.observers.isEmpty()) {
				for(InputObserver o: this.observers) {
					o.inputUpdate(e);
				}
			}
	
		} 
	}
	
	public void detachAll() {
		this.observers.clear();
		this.inputEvents.clear();
	}

	public void update() {
		this.notifyObservers();
	}
	
	/**
	 * Synchronize Observers list to avoid ConcurrentCoModification exceptions
	 */
	private void synchronizeObservers() {
		observers.addAll(auxObservers);
		auxObservers.clear();
	}

}
